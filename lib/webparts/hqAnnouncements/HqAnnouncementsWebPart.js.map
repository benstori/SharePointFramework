{"version":3,"sources":["webparts/hqAnnouncements/HqAnnouncementsWebPart.ts"],"names":[],"mappings":"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","file":"webparts/hqAnnouncements/HqAnnouncementsWebPart.js","sourcesContent":["import { \r\n  Version, \r\n  Environment,  \r\n  EnvironmentType} from '@microsoft/sp-core-library';\r\nimport {\r\n  BaseClientSideWebPart,\r\n  IPropertyPaneConfiguration,\r\n  PropertyPaneTextField\r\n} from '@microsoft/sp-webpart-base';\r\n\r\nimport {  \r\n  SPHttpClient  \r\n} from '@microsoft/sp-http';  \r\n\r\nimport { escape } from '@microsoft/sp-lodash-subset';\r\n\r\nimport styles from './HqAnnouncementsWebPart.module.scss';\r\nimport * as strings from 'HqAnnouncementsWebPartStrings';\r\n\r\nexport interface IHqAnnouncementsWebPartProps {\r\n  description: string;\r\n  SPListName: string;\r\n}\r\n\r\nimport MockHttpClient from './MockHttpClient'; \r\n\r\nexport interface ISPLists {\r\n  value: ISPList[];  \r\n}\r\n\r\nexport interface ISPList{\r\n  Title: string;\r\n  Body: string;\r\n}\r\n\r\nexport default class HqAnnouncementsWebPartWebPart extends BaseClientSideWebPart<IHqAnnouncementsWebPartProps> {\r\n\r\n  public render(): void {\r\n    this.domElement.innerHTML = `\r\n      <div class=\"${styles.hqAnnouncements}\">\r\n        <div class=\"${styles.container}\">  \r\n          <div class=\"ms-Grid-row ${styles.row}\">   \r\n            <div id=\"spListContainer\" /></div>  \r\n          </div>\r\n      </div>`;\r\n      this._renderListAsync();\r\n  }\r\n\r\n  \r\n  protected get dataVersion(): Version {\r\n    return Version.parse('1.0');\r\n  }\r\n\r\n  //this method is used in testing the web part, fake data\r\n  private _getMockListData(): Promise<ISPLists> {  \r\n    return MockHttpClient.get(this.context.pageContext.web.absoluteUrl).then(() => {  \r\n        const listData: ISPLists = {  \r\n            value:  \r\n            [  \r\n                { Title: 'New HQ', Body: 'Modern designed and fully responsive' },  \r\n                 { Title: 'Congrats to Kyle', Body: 'Kyle Bakker wins best SPS preasentation award after raving reviews!'  },  \r\n                { Title: 'Welcome Jon Doe to sdg', Body: 'John Doe is the newest member of the OS team, please welcome John!' },  \r\n                { Title: 'Open Enrollment Time!', Body: 'make sure you get any updated done to benefits' },\r\n                { Title: 'Nintex Workflow Cloud', Body: 'Extend Nintex worlflow across a multiitude of content sources and platforms.' }    \r\n            ]  \r\n          };  \r\n        return listData;  \r\n    }) as Promise<ISPLists>;  \r\n}\r\n  \r\n//production method for the REST Call\r\nprivate _getListData(): Promise<ISPLists> {  \r\n  return this.context.spHttpClient.get(this.context.pageContext.web.absoluteUrl + `/_api/web/lists/GetByTitle('${this.properties.SPListName}')/Items?select=ID,Title,Body&$top%205`, SPHttpClient.configurations.v1)  \r\n      .then((response: Response) => {   \r\n        debugger;  \r\n        return response.json();  \r\n      });  \r\n  } \r\n\r\n  //this checks to see what envoroment the web part is render  and is the main method called from the webpart above.\r\n  private _renderListAsync(): void {  \r\n    \r\n  if (Environment.type === EnvironmentType.Local) {  \r\n    this._getMockListData().then((response) => {  \r\n      this._renderList(response.value);  \r\n    });  \r\n  }  \r\n   else {  \r\n     this._getListData()  \r\n    .then((response) => {  \r\n      this._renderList(response.value);  \r\n    });  \r\n }  \r\n} \r\n\r\n// this methid will render the HTML output for the list data\r\nprivate _renderList(items: ISPList[]): void {  \r\n  let html: string = ``;   \r\n  items.forEach((item: ISPList) => {  \r\n    html += `  \r\n         <h3>${item.Title}</h3>\r\n          <p>${item.Body}</p>\r\n        `;  \r\n  });  \r\n  const listContainer: Element = this.domElement.querySelector('#spListContainer');  \r\n  listContainer.innerHTML = html;  \r\n} \r\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\r\n    return {\r\n      pages: [\r\n        {\r\n          header: {\r\n            description: strings.PropertyPaneDescription\r\n          },\r\n          groups: [\r\n            {\r\n              groupName: strings.BasicGroupName,\r\n              groupFields: [\r\n                PropertyPaneTextField('description', {\r\n                  label: strings.DescriptionFieldLabel\r\n                }),\r\n                PropertyPaneTextField('SPListName', {\r\n                  label: 'SharePoint List Name'\r\n                })\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}